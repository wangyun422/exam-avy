<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>


  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring_*.xml</param-value>
  </context-param>

  <!-- access_token 监听器 -->
  <listener>
    <listener-class>com.avy.project.weixin.api.accessToken.AccessTokenListener</listener-class>
  </listener>


  <!-- SpringMVC编码格式处理UTF-8 -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 生成验证码的servlet -->
  <servlet>
    <servlet-name>validateColorServlet</servlet-name>
    <servlet-class>com.avy.project.meeting.web.util.ValidateColorServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>validateColorServlet</servlet-name>
    <url-pattern>/validate.code</url-pattern>
  </servlet-mapping>

  <!-- SpringMVC
   -->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--
      配置 DispatcherServlet ：DispatcherServlet
           默认加载 /WEB-INF/<servletName-servlet>.xml 的 Spring 配置文件, 启动 WEB 层 的 Spring 容器。
          可以通过 contextConfigLocation 初始化参数自定 义配置文件的位置和名称
     -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring_mvc.xml</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--
        /  拦截所有的请求，不包括JSP。
        /* 拦截所有的请求（包括JSP）
     -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>




  <!-- rest 配置
  浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不支 持，
Spring3.0 添加了一个过滤器**HiddenHttpMethodFilter**，可以将这些请求转换 为标准的 http 方法，使得支持 GET、POST、PUT 与 DELETE 请求。
  -->
  <filter>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


</web-app>
